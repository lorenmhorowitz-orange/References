#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var meow_1 = __importDefault(require("meow"));
var cosmiconfig_1 = __importDefault(require("cosmiconfig"));
var _1 = __importDefault(require("."));
var help = "\n  Usage\n    $ lynt [files] <options>\n\n  Options\n    --typescript   Add support for TypeScript.\n    --flow         Add support for FlowType.\n    --react        Add support for React.\n    --ignore       Glob patterns for paths to ignore.\n    --fix          Automatically fix linting issues.\n    --global       Add support for a given global variable.\n    --env          Add support for a given environment.\n    --json         Get lint results in JSON format instead of default \"stylish\" format.\n    --project      Specify your project's main directory if it isn't in the root (only use with --typescript).\n\n  JavaScript Examples\n    $ lynt\n    $ lynt --react\n    $ lynt --flow\n    $ lynt --react --flow\n    $ lynt src\n    $ lynt src --ignore dist --ignore build --env jest\n    $ lynt src --global chrome --global atom\n\n  TypeScript Examples\n    $ lynt --typescript\n    $ lynt --typescript --react\n    $ lynt --typescript --project .\n    $ lynt src --typescript\n    $ lynt src --typescript --ignore dist --ignore build\n";
var cli = meow_1.default({
    help: help,
    flags: {
        typescript: 'boolean',
        flow: 'boolean',
        react: 'boolean',
        ignore: 'string',
        fix: 'boolean',
        global: 'string',
        env: 'string',
        json: 'boolean',
        project: 'string'
    }
});
var filePaths = cli.input;
var options = cli.flags;
var searchPlaces = ['package.json', '.lyntrc'];
var explorer = cosmiconfig_1.default('lynt', { searchPlaces: searchPlaces });
var configResults = explorer.searchSync();
if (configResults) {
    Object.assign(options, configResults.config);
}
var lyntResults = _1.default(filePaths, options);
var output = options.json
    ? JSON.stringify(lyntResults, null, 4)
    : _1.format(lyntResults);
var exitCode = lyntResults.length > 0 ? 1 : 0;
console.log(output);
process.exit(exitCode);
